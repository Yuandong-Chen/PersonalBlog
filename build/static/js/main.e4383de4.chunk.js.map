{"version":3,"sources":["../node_modules/braft-extensions/dist/assets sync /^/.//.*$","components/Loading.js","components/Search.js","data/articles.js","components/searchEngine/Rating.js","components/Blogs.js","components/Projects.js","components/Editor.js","components/Edit.js","components/AboutMe.js","components/Tabs.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["map","./1.png","./10.png","./11.png","./12.png","./13.png","./14.png","./15.png","./16.png","./17.png","./18.png","./19.png","./2.png","./20.png","./21.png","./22.png","./23.png","./24.png","./25.png","./3.png","./4.png","./5.png","./6.png","./7.png","./8.png","./9.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","LoadingContainer","styled","div","_templateObject","Spinner","_templateObject2","withComponent","TrinityRingsSpinner","Header","h1","_templateObject3","Loading","react_default","a","createElement","color","Wrapper","Search_templateObject","Toggle","button","Search_templateObject2","Input","input","Search_templateObject3","Search","_ref","onChange","onClick","DotsHorizontal","size","type","placeholder","articles","title","date","tags","extract","data","_rating","_vector","rating","find","Set","split","i","_loop","b","toConsumableArray","filter","x","has","length","sort","Title","Blogs_templateObject","Extract","Blogs_templateObject2","DateArticle","Blogs_templateObject3","Data","_templateObject4","CardFrame","_templateObject5","props","toggled","css","_templateObject6","_templateObject7","BlogCard","rest","objectWithoutProperties","assign","es","inverseFlipId","ExpandedBlog","_ref2","flipId","Blogs","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setToggle","setState","_ref3","setFullScreen","s","preventDefault","stopPropagation","target","_ref4","isFullScreen","onCancel","_ref5","setSearching","searching","value","state","slice","inFullScreen","children","className","dangerouslySetInnerHTML","__html","_this2","flipKey","spring","obj","Blogs_ExpandedBlog","key","RawHTML","components_Search","Blogs_Wrapper","stagger","Blogs_BlogCard","React","Component","Projects","options","defaultColumns","defaultRows","syntaxs","name","syntax","emoticons","defaultEmoticons","item","require","concat","closeOnBlur","closeOnSelect","includeEditors","BraftEditor","use","Table","Markdown","CodeHighlighter","Emoticon","Editor","editorState","submitContent","_callee","rawContent","htmlContent","regenerator_default","wrap","_context","prev","next","toHTML","onSave","sent","stop","handleEditorChange","createEditorState","editorId","dist_default","Edit_templateObject","Edit","saveChange","r","html","raw","Edit_Wrapper","Editor_Editor","AboutMe","Menu","Tabs_templateObject","Link","MenuContainer","Tabs_templateObject2","Panel","Tabs_templateObject3","Tabs","tabs","BrowserRouter","to","Switch","Route","path","component","tabConfigs","fadeIn","keyframes","Home_templateObject","AnimeWrapper","Home_templateObject2","Home","tabsConfigs","components_Tabs","App","isLoading","setTimeout","components_Loading","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"yIAAA,IAAAA,EAAA,CACAC,UAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,UAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAA5B,EAAA2B,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAlC,IAEA0B,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,0kBC1CA,IAAMW,EAAmBC,IAAOC,IAAVC,KAKhBC,EAAUH,IAAOC,IAAPG,KAKdC,cAAcC,uBAEVC,EAASP,IAAOQ,GAAVC,KAkBGC,EAXC,WACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACN,EAAD,8BACAI,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAACV,EAAD,CAASW,MAAM,ynBCxBvB,IAAMC,EAAUf,IAAOC,IAAVe,KAKPC,EAASjB,IAAOkB,OAAVC,KAQNC,EAAQpB,IAAOqB,MAAVC,KAmBIC,EANA,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,QACzB,OAAOf,EAAAC,EAAAC,cAACE,EAAD,KACCJ,EAAAC,EAAAC,cAACI,EAAD,CAAQS,QAASA,GAASf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,KAAK,UAAiBjB,EAAAC,EAAAC,cAACO,EAAD,CAAOS,KAAK,OAAOC,YAAY,SAASL,SAAUA,MCenGM,EAhDA,CACb,CACEC,MAAO,wCACPC,KAAM,aACNC,KAAM,wCACNC,QAAS,6CACTC,KAAM,kpIACNC,QAAS,EACTC,QAAS,MAEX,CACEN,MAAO,uCACPC,KAAM,aACNC,KAAM,uCACNC,QAAS,iCACTC,KAAM,ikFACNC,QAAS,EACTC,QAAS,MAEX,CACEN,MAAO,sCACPC,KAAM,aACNC,KAAM,sCACNC,QAAS,iDACTC,KAAM,42GACNC,QAAS,EACTC,QAAS,MAEX,CACEN,MAAO,kCACPC,KAAM,aACNC,KAAM,kCACNC,QAAS,qBACTC,KAAM,o0JACNC,QAAS,EACTC,QAAS,MAEX,CACEN,MAAO,8DACPC,KAAM,aACNC,KAAM,8DACNC,QAAS,uBACTC,KAAM,oxFACNC,QAAS,EACTC,QAAS,gBC5CE,SAASC,EAAOC,EAAMT,GAInC,IAFA,IAAInB,EAAI,IAAI6B,IAAID,EAAKE,MAAM,MACvBC,EAAI,EAHqCC,EAAA,WAK3C,IAAIC,EAAI,IAAIJ,IAAIV,EAASY,GAAGT,KAAKQ,MAAM,MACvCX,EAASY,GAAGN,QAAW,IAAII,IAAI9C,OAAAmD,EAAA,EAAAnD,CAAIiB,GAAGmC,OAAO,SAAAC,GAAC,OAAIH,EAAEI,IAAID,MAAMpB,MAFzDe,EAAIZ,EAASmB,OAAQP,IAAKC,IAIjC,OAAOb,EAASoB,KAAK,SAACvC,EAAGiC,GACvB,OAAGjC,EAAEyB,SAAWQ,EAAER,QACTQ,EAAER,QAAUzB,EAAEyB,QAGlBzB,EAAEqB,KAAOY,EAAEZ,KACL,GAED,8uCCRd,IAAMmB,EAAQpD,IAAOC,IAAVoD,KAOLC,EAAUtD,IAAOC,IAAVsD,KAOPC,EAAcxD,IAAOC,IAAVwD,KAMXC,EAAO1D,IAAOC,IAAV0D,KAOJC,EAAY5D,IAAOC,IAAV4D,IAOX,SAAAC,GAAK,OAAIA,EAAMC,SAAWC,YAAjBC,OAOPlD,EAAUf,IAAOC,IAAViE,IAEO,SAAAJ,GAAK,OAAIA,EAAMC,QAAS,MAAO,UAClC,SAAAD,GAAK,OAAIA,EAAMC,QAAS,OAAQ,QAC/B,SAAAD,GAAK,OAAIA,EAAMC,QAAS,OAAQ,SAK5CI,EAAW,SAAA3C,GAAuD,IAArDuC,EAAqDvC,EAArDuC,QAAS/B,EAA4CR,EAA5CQ,MAAOG,EAAqCX,EAArCW,QAASF,EAA4BT,EAA5BS,KAAkBmC,GAAU5C,EAAtBa,QAAsB1C,OAAA0E,EAAA,EAAA1E,CAAA6B,EAAA,iDACtE,OACEb,EAAAC,EAAAC,cAAC+C,EAADjE,OAAA2E,OAAA,CAAWP,QAASA,EAAS/B,MAAOA,GAAWoC,GAC/CzD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAASC,cAAexC,GACtBrB,EAAAC,EAAAC,cAACuC,EAAD,CAAOpB,MAAOA,GAAQA,IAEtBrB,EAAAC,EAAAC,cAAC2C,EAAD,CAAaxB,MAAOA,GAAQC,GAC5BtB,EAAAC,EAAAC,cAACyC,EAAD,CAAStB,MAAOA,GAAQG,KAKxBsC,EAAe,SAAAC,GAAkC,IAAhC1C,EAAgC0C,EAAhC1C,MAAOI,EAAyBsC,EAAzBtC,KAAMH,EAAmByC,EAAnBzC,KAAMP,EAAagD,EAAbhD,QACxC,OAAOf,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAASI,OAAQ3C,GACxBrB,EAAAC,EAAAC,cAAA,OAAKa,QAASA,GACdf,EAAAC,EAAAC,cAACuC,EAAD,KAAQpB,GACRrB,EAAAC,EAAAC,cAAC2C,EAAD,KAAcvB,GACdtB,EAAAC,EAAAC,cAAC6C,EAAD,KAAOtB,MAuEMwC,eAjEb,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAlF,OAAAmF,EAAA,EAAAnF,CAAAoF,KAAAH,IACjBC,EAAAlF,OAAAqF,EAAA,EAAArF,CAAAoF,KAAApF,OAAAsF,EAAA,EAAAtF,CAAAiF,GAAAM,KAAAH,KAAMjB,KAaRqB,UAAY,WACVN,EAAKO,SAAS,SAAAC,GAAA,MAAgB,CAACtB,SAAjBsB,EAAEtB,YAfCc,EAkBnBS,cAAgB,SAACC,GACfA,EAAEC,iBACFD,EAAEE,kBACF,IAAI9C,EAAI4C,EAAEG,OAAO1D,MACjB6C,EAAKO,SAAS,SAAAO,KAAEC,aAAF,MAAqB,CAACA,aAAcjD,MAtBjCkC,EAyBnBgB,SAAW,WACThB,EAAKO,SAAS,SAAAU,KAAEF,aAAF,MAAqB,CAACA,aAAc,SA1BjCf,EA6BnBkB,aAAe,SAACR,GAEdV,EAAKO,SAAS,CAAEY,UAAWT,EAAEG,OAAOO,MAAOlE,SAAUQ,EAAOgD,EAAEG,OAAOO,MAAOpB,EAAKqB,MAAMnE,SAASoE,YA7BhGtB,EAAKqB,MAAQ,CAACE,aAAa,KAAMrC,SAAQ,EAAOiC,UAAW,GAAIjE,SAAUA,EAASoE,QAAQhD,KAAK,SAACvC,EAAGiC,GACjG,OAAGA,EAAEZ,KAAOrB,EAAEqB,KAAa,EACxBrB,EAAEqB,MAAQY,EAAEZ,KACVrB,EAAEoB,MAAQa,EAAEZ,MACL,EAEH,GAED,KAVO4C,uEAkCXwB,GACN,OAAO1F,EAAAC,EAAAC,cAAA,OAAKyF,UAAW,gBAAiBC,wBAAyB,CAAEC,OAAQH,sCAGpE,IAAAI,EAAA1B,KACP,OACEpE,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAASmC,QAAS3B,KAAKmB,MAAMF,UAAUjB,KAAKmB,MAAMnC,QAAQgB,KAAKmB,MAAMN,aAAce,OAAO,SACzF5B,KAAKmB,MAAMN,aACZb,KAAKmB,MAAMnE,SAASgB,OAAO,SAACC,GAAD,OAAQA,EAAEhB,OAASyE,EAAKP,MAAMN,eACxDpI,IAAI,SAACoJ,GAAS,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,CAAcC,IAAKF,EAAI5E,MAAON,QAAS+E,EAAKZ,SAAU7D,MAAO4E,EAAI5E,MAAOI,KAAMqE,EAAKM,QAAQH,EAAIxE,MAAOH,KAAM2E,EAAI3E,SACrItB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACmG,EAAD,CAAQvF,SAAUsD,KAAKgB,aAAcrE,QAASqD,KAAKI,YACzDxE,EAAAC,EAAAC,cAACoG,EAAD,CAASlD,QAASgB,KAAKmB,MAAMnC,QAASrC,QAASqD,KAAKO,eAElDP,KAAKmB,MAAMnE,SAASvE,IAAI,SAACoJ,GAAD,OACxBjG,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAASuC,IAAKF,EAAI5E,MAAO2C,OAAQiC,EAAI5E,MAAOkF,SAAS,GACnDvG,EAAAC,EAAAC,cAACsG,EAAD,CACEpD,QAAS0C,EAAKP,MAAMnC,QACpB+C,IAAKF,EAAI5E,MACTA,MAAO4E,EAAI5E,MACXG,QAASyE,EAAIzE,QACbF,KAAM2E,EAAI3E,KACVI,QAASuE,EAAIvE,uBAxDL+E,IAAMC,WClEXC,oLARX,OACE3G,EAAAC,EAAAC,cAAA,0CAHiBuG,IAAMC,6KCQvBE,GAAU,CACdC,eAAgB,EAChBC,YAAa,EACbC,QAAS,CACP,CACEC,KAAM,aACNC,OAAQ,cACP,CACDD,KAAM,OACNC,OAAQ,QACP,CACDD,KAAM,MACNC,OAAQ,OACP,CACDD,KAAM,OACNC,OAAQ,QACP,CACDD,KAAM,MACNC,OAAQ,QAGZC,UAtBgBC,oBAAiBtK,IAAI,SAAAuK,GAAI,OAAIC,OAAQ,KAAAC,OAAgCF,MAuBrFG,aAAa,EACbC,eAAe,EACfC,eAAgB,CAAC,gBAGnBC,KAAYC,IAAIC,KAAMhB,KACtBc,KAAYC,IAAIE,KAASjB,KACzBc,KAAYC,IAAIG,KAAgBlB,KAChCc,KAAYC,IAAII,KAASnB,SAEJoB,8MAEnBzC,MAAQ,CACJ0C,YAAa,QAYjBC,qCAAgB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,GAAArI,EAAAsI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAGRN,EAAalE,EAAKqB,MAAM0C,YACxBI,EAAcD,EAAWO,SAJjBH,EAAAE,KAAA,EAKOxE,EAAKf,MAAMyF,OAAOP,EAAaD,GALtC,OAAAI,EAAAK,KAAA,wBAAAL,EAAAM,SAAAX,EAAA/D,WAQhB2E,mBAAqB,SAACd,GACpB/D,EAAKO,SAAS,CAAEwD,+MAhBI,GAEpB7D,KAAKK,SAAS,CACZwD,YAAaP,KAAYsB,kBAHP,GAGsC,CAAEC,SAAU,kJAgB9D,IACAhB,EAAgB7D,KAAKmB,MAArB0C,YACR,OACEjI,EAAAC,EAAAC,cAAA,OAAKyF,UAAU,gBACb3F,EAAAC,EAAAC,cAACgJ,GAAAjJ,EAAD,CACEqF,MAAO2C,EACPnH,SAAUsD,KAAK2E,mBACfH,OAAQxE,KAAK8D,wBAlCazB,IAAMC,uHCvC1C,IAAMtG,GAAUf,IAAOC,IAAV6J,MAwBEC,eAnBb,SAAAA,EAAYjG,GAAO,IAAAe,EAAA,OAAAlF,OAAAmF,EAAA,EAAAnF,CAAAoF,KAAAgF,IACjBlF,EAAAlF,OAAAqF,EAAA,EAAArF,CAAAoF,KAAApF,OAAAsF,EAAA,EAAAtF,CAAAoK,GAAA7E,KAAAH,KAAMjB,KAIRkG,WAAa,SAACzE,EAAG0E,GACfpF,EAAKO,SAAS,CAAC8E,KAAM3E,EAAG4E,IAAKF,KAJ7BpF,EAAKqB,MAAQ,CAACgE,KAAM,GAAIC,IAAK,IAFZtF,wEAUjB,OACElE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuJ,GAAD,KAAUrF,KAAKmB,MAAMgE,MACrBvJ,EAAAC,EAAAC,cAACwJ,GAAD,CAAQd,OAAQxE,KAAKiF,qBAdR5C,IAAMC,WCKViD,oLARX,OACE3J,EAAAC,EAAAC,cAAA,yCAHgBuG,IAAMC,2qBCU5B,IAAMkD,GAAOvK,IAAOC,IAAPuK,MAcXnK,cAAcoK,KAEVC,GAAgB1K,IAAOC,IAAV0K,MAObC,GAAQ5K,IAAOC,IAAV4K,MA6BIC,GAtBF,SAAAtJ,GAAY,IAAVuJ,EAAUvJ,EAAVuJ,KACb,OACEpK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmK,EAAA,EAAD,KACIrK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6J,GAAD,KACGK,EAAKvN,IAAI,SAACmK,GAAD,OAAUhH,EAAAC,EAAAC,cAAC0J,GAAD,CAAMzD,IAAKa,EAAMsD,GAAI,IAAMtD,GAAOA,MAExDhH,EAAAC,EAAAC,cAAC+J,GAAD,KACEjK,EAAAC,EAAAC,cAACqK,EAAA,EAAD,KACEvK,EAAAC,EAAAC,cAACsK,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWzG,KAChCjE,EAAAC,EAAAC,cAACsK,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAW/D,KACnC3G,EAAAC,EAAAC,cAACsK,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWf,KACnC3J,EAAAC,EAAAC,cAACsK,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWtB,iTCpD/C,IAAIuB,GAAa,CACf,QACA,WACA,YAGIC,GAASC,YAAHC,MASNC,GAAe1L,IAAOC,IAAV0L,KACAJ,IAaHK,GARF,SAAApK,GAA6BA,EAA3BqK,YAA2B,IAAd9J,EAAcP,EAAdO,SAC1B,OACEpB,EAAAC,EAAAC,cAAC6K,GAAD,KACE/K,EAAAC,EAAAC,cAACiL,GAAD,CAAMf,KAAMO,GAAYvJ,SAAUA,MCPzBgK,eAhBb,SAAAA,EAAYjI,GAAO,IAAAe,EAAA,OAAAlF,OAAAmF,EAAA,EAAAnF,CAAAoF,KAAAgH,IACjBlH,EAAAlF,OAAAqF,EAAA,EAAArF,CAAAoF,KAAApF,OAAAsF,EAAA,EAAAtF,CAAAoM,GAAA7G,KAAAH,KAAMjB,KACDoC,MAAQ,CAAE8F,WAAW,GAFTnH,mFAKC,IAAA4B,EAAA1B,KAClBkH,WAAW,WAAQxF,EAAKrB,SAAS,CAAC4G,WAAW,KAAY,sCAIzD,OACIjH,KAAKmB,MAAM8F,UAAWrL,EAAAC,EAAAC,cAACqL,EAAD,MAAWvL,EAAAC,EAAAC,cAACsL,GAAD,aAZvB/E,IAAMC,WCOJ+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/L,EAAAC,EAAAC,cAAC8L,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.e4383de4.chunk.js","sourcesContent":["var map = {\n\t\"./1.png\": 251,\n\t\"./10.png\": 252,\n\t\"./11.png\": 253,\n\t\"./12.png\": 254,\n\t\"./13.png\": 255,\n\t\"./14.png\": 256,\n\t\"./15.png\": 257,\n\t\"./16.png\": 258,\n\t\"./17.png\": 259,\n\t\"./18.png\": 260,\n\t\"./19.png\": 261,\n\t\"./2.png\": 262,\n\t\"./20.png\": 263,\n\t\"./21.png\": 264,\n\t\"./22.png\": 265,\n\t\"./23.png\": 266,\n\t\"./24.png\": 267,\n\t\"./25.png\": 268,\n\t\"./3.png\": 269,\n\t\"./4.png\": 270,\n\t\"./5.png\": 271,\n\t\"./6.png\": 272,\n\t\"./7.png\": 273,\n\t\"./8.png\": 274,\n\t\"./9.png\": 275\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 250;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TrinityRingsSpinner } from 'react-epic-spinners'\nimport styled from 'styled-components';\n\nconst LoadingContainer = styled.div`\n  width: 100%;\n  height: 200px;\n`;\n\nconst Spinner = styled.div`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding-bottom: 100px;\n`.withComponent(TrinityRingsSpinner)\n\nconst Header = styled.h1`\n  margin-top: 25%;\n  font-family: 'Monoton', cursive;\n  text-align: center;\n  color: black;\n`;\n\nconst Loading = () => {\n  return(\n    <div>\n      <Header>Happy Coding Everyday</Header>\n      <LoadingContainer>\n        <Spinner color=\"black\" />\n      </LoadingContainer>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport {DotsHorizontal as Card} from 'styled-icons/boxicons-regular/DotsHorizontal';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nconst Toggle = styled.button`\n  flex: 1 0\n  text-align: right;\n  background: none;\n  max-width: 60px;\n  border: none;\n`;\n\nconst Input = styled.input`\n  flex: 1 0\n  height: 24px;\n  padding: 0.5em;\n  margin: 0.5em;\n  margin-right: 20px;\n  color: black\n  background: white;\n  border: solid 0.5px black;\n  border-radius: 3px;\n  max-width: 100px;\n`;\n\nconst Search = ({onChange, onClick}) => {\n  return <Wrapper>\n          <Toggle onClick={onClick}><Card size=\"45px\"/></Toggle><Input type=\"text\" placeholder=\"Search\" onChange={onChange} />\n        </Wrapper>\n};\n\nexport default Search;\n","let articles = [\n  {\n    title: \"LeetCode 556 Next Greater Element III\",\n    date: \"2019-01-01\",\n    tags: \"LeetCode 556 Next Greater Element III\",\n    extract: \"Use Stack data Structure Easy achieve O(N)\",\n    data: '<p><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">Given a positive</span></span></span><strong>32-bit</strong><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">integer</span></span></span><strong>n</strong><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">, you need to find the smallest</span></span></span><strong>32-bit</strong><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">integer which has exactly the same digits existing in the integer</span></span></span><strong>n</strong><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">and is greater in value than n. If no such positive</span></span></span><strong>32-bit</strong><span style=\"color:#000000\"><span style=\"font-size:13px\"><span style=\"background-color:#ffffff\">integer exists, you need to return -1.</span></span></span></p><p><strong>Example 1:</strong></p><pre><code><strong>Input:</strong> 12<br/><strong>Output:</strong> 21<br/></code></pre><p style=\"text-align:start;text-indent:2em;\"> </p><p><strong>Example 2:</strong></p><pre><code><strong>Input:</strong> 21<br/><strong>Output:</strong> -1</code></pre><p></p><pre><code>object Solution {<br/> def nextGreaterElement(n: Int): Int = {<br/> val arr: Array[Char] = n.toString.toCharArray<br/> val len = arr.length<br/> <span style=\"color:#aa0d91\">if</span>(len == <span style=\"color:#1c00cf\">0</span>) <span style=\"color:#aa0d91\">return</span> -<span style=\"color:#1c00cf\">1</span><br/> import collection.mutable.Stack<br/> val <span style=\"color:#aa0d91\">q</span>: Array[Int] = Array.fill(len)(-<span style=\"color:#1c00cf\">1</span>)<br/> val stk: Stack[(Int, Int)] = Stack()<br/> stk.push((arr(len - <span style=\"color:#1c00cf\">1</span>), len - <span style=\"color:#1c00cf\">1</span>))<br/> var i = len - <span style=\"color:#1c00cf\">2</span><br/> <span style=\"color:#aa0d91\">while</span>(i &gt;= <span style=\"color:#1c00cf\">0</span>) {<br/> <span style=\"color:#aa0d91\">while</span>(stk.nonEmpty &amp;&amp; stk.top._1 &gt; arr(i)) {<br/> val (<span style=\"color:#1c00cf\">_</span>, ind) = stk.pop()<br/> <span style=\"color:#aa0d91\">if</span>(<span style=\"color:#c41a16\">q(ind)</span> == -<span style=\"color:#1c00cf\">1</span>) {<br/> <span style=\"color:#c41a16\">q(ind)</span> = i<br/> }<br/> }<br/> stk.push((arr(i), i))<br/> i -= <span style=\"color:#1c00cf\">1</span><br/> }<br/> //println(q.toList)<br/> val <span style=\"color:#aa0d91\">m</span> = q.max<br/> <span style=\"color:#aa0d91\">if</span>(<span style=\"color:#aa0d91\">m</span> == -<span style=\"color:#1c00cf\">1</span>) <span style=\"color:#aa0d91\">return</span> -<span style=\"color:#1c00cf\">1</span><br/> var find = q.length - <span style=\"color:#1c00cf\">1</span><br/> var <span style=\"color:#aa0d91\">continue</span> = true<br/> <span style=\"color:#aa0d91\">while</span> (find &gt;= <span style=\"color:#1c00cf\">0</span> &amp;&amp; <span style=\"color:#aa0d91\">continue</span>) {<br/> <span style=\"color:#aa0d91\">if</span>(<span style=\"color:#c41a16\">q(find)</span> == <span style=\"color:#aa0d91\">m</span>) {<br/> <span style=\"color:#aa0d91\">continue</span> = false<br/> }<br/> find -= <span style=\"color:#1c00cf\">1</span><br/> }<br/> find += <span style=\"color:#1c00cf\">1</span><br/> <span style=\"color:#aa0d91\">if</span>(find == -<span style=\"color:#1c00cf\">1</span>) <span style=\"color:#aa0d91\">return</span> -<span style=\"color:#1c00cf\">1</span><br/> val t = arr(find)<br/> arr(find) = arr(<span style=\"color:#c41a16\">q(find)</span>)<br/> arr(<span style=\"color:#c41a16\">q(find)</span>) = t<br/> try {<br/> (arr.take(<span style=\"color:#c41a16\">q(find)</span> + <span style=\"color:#1c00cf\">1</span>) ++ arr.drop(<span style=\"color:#c41a16\">q(find)</span> + <span style=\"color:#1c00cf\">1</span>).sorted).foldLeft(<span style=\"color:#c41a16\">&quot;&quot;</span>)(<span style=\"color:#1c00cf\">_</span> + <span style=\"color:#1c00cf\">_</span>).toInt<br/> }<br/> catch {<br/> case <span style=\"color:#1c00cf\">_</span>: <span style=\"color:#c41a16\">Throwable =&gt;</span> -<span style=\"color:#1c00cf\">1</span><br/> }<br/> }<br/>}</code></pre>',\n    _rating: 0,\n    _vector: null\n  },\n  {\n    title: \"LeetCode 503 Next Greater Element II\",\n    date: \"2019-01-02\",\n    tags: \"LeetCode 503 Next Greater Element II\",\n    extract: \"Solve cyclic array using Stack\",\n    data: '<p style=\"text-align:start;text-indent:2em;\">Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn&#x27;t exist, output -1 for this number.</p><p></p><p style=\"text-align:start;text-indent:2em;\"><strong>Example 1:</strong><br/></p><pre><code><strong>Input:</strong> [1,2,1]<br/><strong>Output:</strong> [2,-1,2]<br/><strong>Explanation:</strong> The first 1&#x27;s next greater number is 2; <br/>The number 2 can&#x27;t find next greater number; <br/>The second 1&#x27;s next greater number needs to search circularly, which is also 2.<br/></code></pre><p style=\"text-align:start;text-indent:2em;\"><strong>Note:</strong> The length of given array won&#x27;t exceed 10000.</p><p></p><pre><code>object Solution {<br/> def nextGreaterElements(nums: <span style=\"color:#5c2699\">Array</span>[<span style=\"color:#5c2699\">Int</span>]): <span style=\"color:#5c2699\">Array</span>[<span style=\"color:#5c2699\">Int</span>] = {<br/> import collection.mutable.Stack<br/> val stk: Stack[(<span style=\"color:#5c2699\">Int</span>, <span style=\"color:#5c2699\">Int</span>)] = Stack()<br/> val <span style=\"color:#5c2699\">len</span> = nums.length<br/> <span style=\"color:#aa0d91\">if</span>(<span style=\"color:#5c2699\">len</span> == <span style=\"color:#1c00cf\">0</span>) return <span style=\"color:#5c2699\">Array</span>()<br/> val q: <span style=\"color:#5c2699\">Array</span>[<span style=\"color:#5c2699\">Int</span>] = <span style=\"color:#5c2699\">Array</span>.fill(<span style=\"color:#5c2699\">len</span>)(<span style=\"color:#1c00cf\">-1</span>)<br/> var i = <span style=\"color:#1c00cf\">1</span><br/> stk.push((nums(<span style=\"color:#1c00cf\">0</span>), <span style=\"color:#1c00cf\">0</span>))<br/> <span style=\"color:#aa0d91\">while</span>(i &lt; <span style=\"color:#1c00cf\">2</span> * <span style=\"color:#5c2699\">len</span>) {<br/> <span style=\"color:#aa0d91\">while</span> (stk.nonEmpty &amp;&amp; stk.top._1 &lt; nums(i % <span style=\"color:#5c2699\">len</span>)) {<br/> val (_, ind) = stk.pop()<br/> <span style=\"color:#aa0d91\">if</span>(q(ind) == <span style=\"color:#1c00cf\">-1</span>) {<br/> q(ind) = nums(i % <span style=\"color:#5c2699\">len</span>)<br/> }<br/> }<br/> stk.push((nums(i % <span style=\"color:#5c2699\">len</span>), i % <span style=\"color:#5c2699\">len</span>))<br/> i += <span style=\"color:#1c00cf\">1</span><br/> }<br/> q<br/> }<br/>}</code></pre>',\n    _rating: 0,\n    _vector: null\n  },\n  {\n    title: \"LeetCode 496 Next Greater Element I\",\n    date: \"2019-01-03\",\n    tags: \"LeetCode 496 Next Greater Element I\",\n    extract: \"Solve dinstinct condition next greater problem\",\n    data: '<p style=\"text-align:start;text-indent:2em;\">You are given two arrays <strong>(without duplicates)</strong> <code>nums1</code> and <code>nums2</code> where <code>nums1</code>’s elements are subset of <code>nums2</code>. Find all the next greater numbers for <code>nums1</code>&#x27;s elements in the corresponding places of <code>nums2</code>. </p><p style=\"text-align:start;text-indent:2em;\">The Next Greater Number of a number <strong>x</strong> in <code>nums1</code> is the first greater number to its right in <code>nums2</code>. If it does not exist, output -1 for this number.</p><p style=\"text-align:start;text-indent:2em;\"><strong>Example 1:</strong><br/></p><pre><code><strong>Input:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].<br/><strong>Output:</strong> [-1,3,-1]<br/><strong>Explanation:</strong><br/> For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.<br/> For number 1 in the first array, the next greater number for it in the second array is 3.<br/> For number 2 in the first array, there is no next greater number for it in the second array, so output -1.<br/></code></pre><p style=\"text-align:start;text-indent:2em;\"></p><p style=\"text-align:start;text-indent:2em;\"><strong>Example 2:</strong><br/></p><pre><code><strong>Input:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].<br/><strong>Output:</strong> [3,-1]<br/><strong>Explanation:</strong><br/> For number 2 in the first array, the next greater number for it in the second array is 3.<br/> For number 4 in the first array, there is no next greater number for it in the second array, so output -1.<br/></code></pre><p style=\"text-align:start;text-indent:2em;\"></p><p style=\"text-align:start;text-indent:2em;\"><strong>Note:</strong><br/></p><ol><li>All elements in <code>nums1</code> and <code>nums2</code> are unique.</li><li>The length of both <code>nums1</code> and <code>nums2</code> would not exceed 1000.</li></ol><pre><code><span style=\"color:#aa0d91\">object</span> Solution {<br/> def nextGreaterElement(nums1: Array[<span style=\"color:#5c2699\">Int</span>], nums2: Array[<span style=\"color:#5c2699\">Int</span>]): Array[<span style=\"color:#5c2699\">Int</span>] = {<br/> <span style=\"color:#aa0d91\">import</span> collection.mutable.{Map, Stack}<br/> <span style=\"color:#aa0d91\">val</span> q: Map[<span style=\"color:#5c2699\">Int</span>, <span style=\"color:#5c2699\">Int</span>] = Map().withDefaultValue(-<span style=\"color:#1c00cf\">1</span>)<br/> <span style=\"color:#aa0d91\">val</span> stk: Stack[<span style=\"color:#5c2699\">Int</span>] = Stack()<br/> <span style=\"color:#aa0d91\">val</span> len = nums2.length<br/> <span style=\"color:#aa0d91\">if</span>(len == <span style=\"color:#1c00cf\">0</span>) <span style=\"color:#aa0d91\">return</span> Array()<br/> stk.push(nums2(<span style=\"color:#1c00cf\">0</span>))<br/> <span style=\"color:#aa0d91\">var</span> i = <span style=\"color:#1c00cf\">1</span><br/> <span style=\"color:#aa0d91\">while</span>(i &lt; len) {<br/> <span style=\"color:#aa0d91\">while</span>(stk.nonEmpty &amp;&amp; stk.top &lt; nums2(i)) {<br/> <span style=\"color:#aa0d91\">val</span> j = stk.pop()<br/> q(j) = nums2(i)<br/> }<br/> stk.push(nums2(i))<br/> i += <span style=\"color:#1c00cf\">1</span><br/> }<br/> <br/> <span style=\"color:#aa0d91\">for</span> {<br/> i &lt;- nums1<br/> } yield q(i)<br/> }<br/>}</code></pre>',\n    _rating: 0,\n    _vector: null\n  },\n  {\n    title: \"LeetCode 743 Network Delay Time\",\n    date: \"2019-01-04\",\n    tags: \"LeetCode 743 Network Delay Time\",\n    extract: \"Dijkstra Algorithm\",\n    data: '<p style=\"text-align:start;text-indent:2em;\">There are <code>N</code> network nodes, labelled <code>1</code> to <code>N</code>.</p><p style=\"text-align:start;text-indent:2em;\">Given <code>times</code>, a list of travel times as <strong>directed</strong> edges <code>times[i] = (u, v, w)</code>, where <code>u</code> is the source node, <code>v</code> is the target node, and <code>w</code> is the time it takes for a signal to travel from source to target.</p><p style=\"text-align:start;text-indent:2em;\">Now, we send a signal from a certain node <code>K</code>. How long will it take for all nodes to receive the signal? If it is impossible, return <code>-1</code>.</p><p style=\"text-align:start;text-indent:2em;\"><strong>Note:</strong></p><ol><li><code>N</code> will be in the range <code>[1, 100]</code>.</li><li><code>K</code> will be in the range <code>[1, N]</code>.</li><li>The length of <code>times</code> will be in the range <code>[1, 6000]</code>.</li><li>All edges <code>times[i] = (u, v, w)</code> will have <code>1 &lt;= u, v &lt;= N</code> and <code>1 &lt;= w &lt;= 100</code>.</li></ol><pre><code><span style=\"color:#aa0d91\">object</span> Solution {<br/> def networkDelayTime(times: Array[Array[<span style=\"color:#5c2699\">Int</span>]], N: <span style=\"color:#5c2699\">Int</span>, K: <span style=\"color:#5c2699\">Int</span>): <span style=\"color:#5c2699\">Int</span> = {<br/> <span style=\"color:#aa0d91\">import</span> collection.mutable.Map<br/> <span style=\"color:#aa0d91\">var</span> graph: Map[<span style=\"color:#5c2699\">Int</span>, Map[<span style=\"color:#5c2699\">Int</span>, <span style=\"color:#5c2699\">Int</span>]] = Map().withDefaultValue(<span style=\"color:#aa0d91\">null</span>)<br/> <span style=\"color:#aa0d91\">for</span> {<br/> Array(u, v, w) &lt;- times<br/> } {<br/> <span style=\"color:#aa0d91\">if</span>(graph(u) == <span style=\"color:#aa0d91\">null</span>) {<br/> graph(u) = Map(v -&gt; w)<br/> }<br/> <span style=\"color:#aa0d91\">else</span> {<br/> graph(u)(v) = w<br/> }<br/> }<br/> <span style=\"color:#aa0d91\">val</span> seen = Array.fill(N)(<span style=\"color:#aa0d91\">false</span>)<br/> <span style=\"color:#aa0d91\">val</span> dis = Array.fill(N)(<span style=\"color:#5c2699\">Int</span>.MaxValue)<br/> <span style=\"color:#aa0d91\">for</span> {<br/> i &lt;- <span style=\"color:#1c00cf\">0</span> until N<br/> } {<br/> dis(i) = <span style=\"color:#5c2699\">Int</span>.MaxValue<br/> }<br/> seen(K - <span style=\"color:#1c00cf\">1</span>) = <span style=\"color:#aa0d91\">true</span><br/> dis(K - <span style=\"color:#1c00cf\">1</span>) = <span style=\"color:#1c00cf\">0</span><br/> <span style=\"color:#aa0d91\">if</span>(graph(K) != <span style=\"color:#aa0d91\">null</span>) {<br/> <span style=\"color:#aa0d91\">for</span> {<br/> (v, w) &lt;- graph(K).toArray<br/> } {<br/> dis(v - <span style=\"color:#1c00cf\">1</span>) = w<br/> }<br/> }<br/> <span style=\"color:#aa0d91\">else</span> {<br/> <span style=\"color:#aa0d91\">if</span>(N == <span style=\"color:#1c00cf\">1</span>) <span style=\"color:#aa0d91\">return</span> <span style=\"color:#1c00cf\">0</span><br/> <span style=\"color:#aa0d91\">return</span> -<span style=\"color:#1c00cf\">1</span><br/> }<br/> <span style=\"color:#aa0d91\">var</span> <span style=\"color:#aa0d91\">continue</span> = <span style=\"color:#aa0d91\">true</span><br/> <span style=\"color:#aa0d91\">while</span>(<span style=\"color:#aa0d91\">continue</span>) {<br/> <span style=\"color:#aa0d91\">var</span> shortestP = -<span style=\"color:#1c00cf\">1</span><br/> <span style=\"color:#aa0d91\">var</span> shortestDis = <span style=\"color:#5c2699\">Int</span>.MaxValue<br/> <span style=\"color:#aa0d91\">for</span> {<br/> (b, ind) &lt;- seen.zipWithIndex <span style=\"color:#aa0d91\">if</span> !b<br/> } {<br/> <span style=\"color:#aa0d91\">if</span>(dis(ind) &lt; shortestDis) {<br/> shortestP = ind + <span style=\"color:#1c00cf\">1</span><br/> shortestDis = dis(ind)<br/> }<br/> }<br/> <span style=\"color:#aa0d91\">if</span>(shortestP == -<span style=\"color:#1c00cf\">1</span>) {<br/> <span style=\"color:#aa0d91\">continue</span> = <span style=\"color:#aa0d91\">false</span><br/> }<br/> <span style=\"color:#aa0d91\">else</span> {<br/> seen(shortestP - <span style=\"color:#1c00cf\">1</span>) = <span style=\"color:#aa0d91\">true</span><br/> dis(shortestP - <span style=\"color:#1c00cf\">1</span>) = shortestDis<br/> <span style=\"color:#aa0d91\">if</span>(graph(shortestP) != <span style=\"color:#aa0d91\">null</span>) {<br/> <span style=\"color:#aa0d91\">for</span> {<br/> (u, w) &lt;- graph(shortestP).toArray<br/> } {<br/> dis(u - <span style=\"color:#1c00cf\">1</span>) = Math.min(dis(u - <span style=\"color:#1c00cf\">1</span>), shortestDis + w)<br/> }<br/> }<br/> }<br/> }<br/> <span style=\"color:#aa0d91\">val</span> ans = dis.max<br/> <span style=\"color:#aa0d91\">if</span>(ans == <span style=\"color:#5c2699\">Int</span>.MaxValue) <span style=\"color:#aa0d91\">return</span> -<span style=\"color:#1c00cf\">1</span><br/> ans<br/> }<br/>}</code></pre>',\n    _rating: 0,\n    _vector: null\n  },\n  {\n    title: \"LeetCode 600 Non-negative Integers without Consecutive Ones\",\n    date: \"2019-01-05\",\n    tags: \"LeetCode 600 Non-negative Integers without Consecutive Ones\",\n    extract: \"Fibonacci DP Problem\",\n    data: '<p style=\"text-align:start;text-indent:2em;\">Given a positive integer n, find the number of <strong>non-negative</strong> integers less than or equal to n, whose binary representations do NOT contain <strong>consecutive ones</strong>.</p><p style=\"text-align:start;text-indent:2em;\"><strong>Example 1:</strong><br/></p><pre><code><strong>Input:</strong> 5<br/><strong>Output:</strong> 5<br/><strong>Explanation:</strong> <br/>Here are the non-negative integers &lt;= 5 with their corresponding binary representations:<br/>0 : 0<br/>1 : 1<br/>2 : 10<br/>3 : 11<br/>4 : 100<br/>5 : 101<br/>Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. <br/></code></pre><p style=\"text-align:start;text-indent:2em;\"></p><p style=\"text-align:start;text-indent:2em;\"><strong>Note:</strong> 1 &lt;= n &lt;= 10<sup>9</sup></p><pre><code>object Solution {<br/> val dp: Array[Int] = Array.fill(<span style=\"color:#1c00cf\">32</span>)(<span style=\"color:#1c00cf\">0</span>)<br/> dp(<span style=\"color:#1c00cf\">0</span>) = <span style=\"color:#1c00cf\">1</span><br/> dp(<span style=\"color:#1c00cf\">1</span>) = <span style=\"color:#1c00cf\">2</span><br/> <span style=\"color:#aa0d91\">for</span> {<br/> i &lt;- <span style=\"color:#1c00cf\">2</span> to <span style=\"color:#1c00cf\">31</span><br/> } {<br/> dp(i) = dp(i - <span style=\"color:#1c00cf\">1</span>) + dp(i - <span style=\"color:#1c00cf\">2</span>)<br/> }<br/> def findIntegers(num: Int): Int = {<br/> var ans = <span style=\"color:#1c00cf\">0</span><br/> val arr: Array[Int] = num.toBinaryString.toCharArray.map(_ - <span style=\"color:#c41a16\">&#x27;0&#x27;</span>)<br/> var i = <span style=\"color:#1c00cf\">0</span><br/> val len = arr.length<br/> var preOne = <span style=\"color:#aa0d91\">false</span><br/> var <span style=\"color:#aa0d91\">continue</span> = <span style=\"color:#aa0d91\">true</span><br/> <span style=\"color:#aa0d91\">while</span>(i &lt; len &amp;&amp; <span style=\"color:#aa0d91\">continue</span>) {<br/> <span style=\"color:#aa0d91\">if</span>(arr(i) == <span style=\"color:#1c00cf\">1</span>) {<br/> <span style=\"color:#aa0d91\">if</span>(preOne) {<br/> ans += dp(len - i - <span style=\"color:#1c00cf\">1</span>)<br/> <span style=\"color:#aa0d91\">continue</span> = <span style=\"color:#aa0d91\">false</span><br/> }<br/> <span style=\"color:#aa0d91\">else</span> {<br/> ans += dp(len - i - <span style=\"color:#1c00cf\">1</span>)<br/> preOne = <span style=\"color:#aa0d91\">true</span><br/> }<br/> }<br/> <span style=\"color:#aa0d91\">else</span> {<br/> preOne = <span style=\"color:#aa0d91\">false</span><br/> }<br/> i += <span style=\"color:#1c00cf\">1</span><br/> }<br/> <span style=\"color:#aa0d91\">if</span>(i == len &amp;&amp; <span style=\"color:#aa0d91\">continue</span>) {<br/> ans += <span style=\"color:#1c00cf\">1</span><br/> }<br/> ans<br/> }<br/>}</code></pre>',\n    _rating: 0,\n    _vector: null\n  }\n];\n\nexport default articles;\n","export default function rating(find, articles) {\n  // use find to compute new _rating of articles\n  let a = new Set(find.split(\" \"));\n  let i = 0;\n  for (; i < articles.length; i++) {\n    let b = new Set(articles[i].tags.split(\" \"));\n    articles[i]._rating = (new Set([...a].filter(x => b.has(x)))).size;\n  }\n  return articles.sort((a, b) => {\n    if(a._rating != b._rating) {\n      return b._rating - a._rating;\n    }\n    else {\n      if(a.date < b.date) {\n        return 1;\n      }\n      return -1;\n    }\n  })\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled, {css} from 'styled-components';\nimport { Flipper, Flipped } from 'react-flip-toolkit';\nimport Search from './Search'\nimport articles from '../data/articles'\nimport rating from './searchEngine/Rating'\n\nconst Title = styled.div`\n  text-align: center;\n  font-size: 20px;\n  font-family: \"Times New Roman\";\n  padding-top:10px;\n`;\n\nconst Extract = styled.div`\n  padding-left: 50px;\n  padding-right: 50px;\n  display: inline-block;\n  font-family: \"Times New Roman\";\n`;\n\nconst DateArticle = styled.div`\n  padding-left:50px;\n  display: flow;\n  font-family: \"Times New Roman\";\n`;\n\nconst Data = styled.div`\n  padding-left:50px;\n  padding-right:50px;\n  font-family: \"Times New Roman\";\n  padding-bottom: 50px;\n`;\n\nconst CardFrame = styled.div`\n  flex-basis: 20%;\n  flex-grow: 0;\n  margin-top: 20px;\n  background: white;\n  border-top: solid 0.5px black;\n  border-bottom: solid 0.5px black;\n  ${props => props.toggled && css`\n    border: solid 0.5px black;\n    border-radius: 4px;\n    margin-right: 10px;\n    `};\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: ${props => props.toggled? \"row\": \"column\"};\n  padding-left:${props => props.toggled? \"50px\": \"none\"};\n  padding-right:${props => props.toggled? \"50px\": \"none\"};\n  flex-wrap: wrap;\n  margin-bottom: 40px;\n`;\n\nconst BlogCard = ({toggled, title, extract, date, _rating, ...rest}) => {\n  return (\n    <CardFrame toggled={toggled} title={title} {...rest}>\n    <Flipped inverseFlipId={title}>\n      <Title title={title}>{title}</Title>\n    </Flipped>\n      <DateArticle title={title}>{date}</DateArticle>\n      <Extract title={title}>{extract}</Extract>\n    </CardFrame>\n  );\n};\n\nconst ExpandedBlog = ({title, data, date, onClick}) => {\n  return <Flipped flipId={title}>\n  <div onClick={onClick}>\n  <Title>{title}</Title>\n  <DateArticle>{date}</DateArticle>\n  <Data>{data}</Data>\n  </div>\n  </Flipped>\n};\n\nclass Blogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {inFullScreen:null, toggled:false, searching: \"\", articles: articles.slice().sort((a, b) => {\n      if(b.date > a.date) return 1;\n      if(a.date == b.date) {\n        if(a.title < b.date) {\n          return -1\n        }\n        return 1;\n      }\n      return -1;\n    })};\n  }\n\n  setToggle = () => {\n    this.setState(({toggled}) => ({toggled: !toggled}));\n  }\n\n  setFullScreen = (s) => {\n    s.preventDefault();\n    s.stopPropagation();\n    let i = s.target.title;\n    this.setState(({isFullScreen}) => ({isFullScreen: i}));\n  }\n\n  onCancel = () => {\n    this.setState(({isFullScreen}) => ({isFullScreen: null}));\n  }\n\n  setSearching = (s) => {\n    //we need to modify the rating of our articles\n    this.setState({ searching: s.target.value, articles: rating(s.target.value, this.state.articles.slice()) });\n  }\n\n  RawHTML(children){\n    return <div className={'markdown-body'} dangerouslySetInnerHTML={{ __html: children}} />;\n  }\n\n  render() {\n    return (\n      <Flipper flipKey={this.state.searching+this.state.toggled+this.state.isFullScreen} spring=\"stiff\">\n      {this.state.isFullScreen?\n      this.state.articles.filter((x) => (x.title == this.state.isFullScreen))\n      .map((obj) => {return <ExpandedBlog key={obj.title} onClick={this.onCancel} title={obj.title} data={this.RawHTML(obj.data)} date={obj.date} />})\n      :<div><Search onChange={this.setSearching} onClick={this.setToggle} />\n      <Wrapper toggled={this.state.toggled} onClick={this.setFullScreen}>\n      {\n        this.state.articles.map((obj) =>\n        <Flipped key={obj.title} flipId={obj.title} stagger={true}>\n          <BlogCard\n            toggled={this.state.toggled}\n            key={obj.title}\n            title={obj.title}\n            extract={obj.extract}\n            date={obj.date}\n            _rating={obj._rating}\n            />\n        </Flipped>)\n      }\n      </Wrapper></div>}\n      </Flipper>\n    );\n  }\n}\n\nexport default Blogs;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\n\nclass Projects extends React.Component {\n  render() {\n    return (\n      <div>\n        \"I am Projects TODO\"\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React from 'react'\nimport BraftEditor from 'braft-editor'\nimport 'braft-editor/dist/index.css'\nimport 'braft-extensions/dist/table.css'\nimport 'braft-extensions/dist/code-highlighter.css'\nimport 'braft-extensions/dist/emoticon.css'\nimport Emoticon, { defaultEmoticons } from 'braft-extensions/dist/emoticon'\nimport Markdown from 'braft-extensions/dist/markdown'\nimport Table from 'braft-extensions/dist/table'\nimport CodeHighlighter from 'braft-extensions/dist/code-highlighter'\n\nconst emoticons = defaultEmoticons.map(item => require(`braft-extensions/dist/assets/${item}`))\nconst options = {\n  defaultColumns: 3, // 默认列数\n  defaultRows: 3, // 默认行数\n  syntaxs: [\n    {\n      name: 'JavaScript',\n      syntax: 'javascript'\n    }, {\n      name: 'HTML',\n      syntax: 'html'\n    }, {\n      name: 'CSS',\n      syntax: 'css'\n    }, {\n      name: 'Java',\n      syntax: 'java',\n    }, {\n      name: 'PHP',\n      syntax: 'php'\n    }\n  ],\n  emoticons: emoticons, // 指定可用表情图片列表，默认为空\n  closeOnBlur: false, // 指定是否在点击表情选择器之外的地方时关闭表情选择器，默认false\n  closeOnSelect: false, // 指定是否在选择表情后关闭表情选择器，默认false\n  includeEditors: ['editor-id-1'], // 指定该模块对哪些BraftEditor生效，不传此属性则对所有BraftEditor有效\n}\n\nBraftEditor.use(Table(options))\nBraftEditor.use(Markdown(options))\nBraftEditor.use(CodeHighlighter(options))\nBraftEditor.use(Emoticon(options))\n\nexport default class Editor extends React.Component {\n\n  state = {\n      editorState: null\n  }\n\n  async componentDidMount () {\n    // 假设此处从服务端获取html格式的编辑器内容\n    const htmlContent = \"\";//await fetchEditorContent()\n    // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorState数据\n    this.setState({\n      editorState: BraftEditor.createEditorState(htmlContent, { editorId: 'editor-1' })\n    });\n  }\n\n  submitContent = async () => {\n    // 在编辑器获得焦点时按下ctrl+s会执行此方法\n    // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容\n    const rawContent = this.state.editorState;\n    const htmlContent = rawContent.toHTML();\n    const result = await this.props.onSave(htmlContent, rawContent);\n  }\n\n  handleEditorChange = (editorState) => {\n    this.setState({ editorState });\n  }\n\n  render () {\n    const { editorState } = this.state;\n    return (\n      <div className=\"my-component\">\n        <BraftEditor\n          value={editorState}\n          onChange={this.handleEditorChange}\n          onSave={this.submitContent}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Editor from './Editor';\n\nconst Wrapper = styled.div`\n  border-bottom: solid 1px black;\n`;\n\nclass Edit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {html: \"\", raw: \"\"};\n  }\n\n  saveChange = (s, r) => {\n    this.setState({html: s, raw: r});\n  }\n\n  render() {\n    return (\n      <div>\n      <Wrapper>{this.state.html}</Wrapper>\n      <Editor onSave={this.saveChange}/>\n      </div>\n    );\n  }\n}\n\nexport default Edit;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\n\nclass AboutMe extends React.Component {\n  render() {\n    return (\n      <div>\n        \"I am AboutMe TODO\"\n      </div>\n    );\n  }\n}\n\nexport default AboutMe;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport styled from 'styled-components';\nimport Blogs from './Blogs';\nimport Projects from './Projects';\nimport Edit from './Edit';\nimport AboutMe from './AboutMe';\n\nconst Menu = styled.div`\n  display: inline-block;\n  font-family: 'Monoton', cursive;\n  font-size: 24px;\n  font-weight: bold;\n  margin-left: 10px;\n  color: black;\n  text-decoration: none;\n  &:hover {\n    color: gray;\n    font-weight: light;\n    cursor: pointer;\n  }\n  user-drag: none;\n`.withComponent(Link);\n\nconst MenuContainer = styled.div`\n  margin-top: 25px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst Panel = styled.div`\n  display: block;\n  width: 100%;\n  margin-top: 50px;\n  border-top: solid 0.5px black;\n`;\n\nconst Tabs = ({tabs}) => {\n  return (\n    <div>\n      <Router>\n          <div>\n            <MenuContainer>\n              {tabs.map((name) => <Menu key={name} to={'/' + name}>{name}</Menu>)}\n            </MenuContainer>\n            <Panel>\n              <Switch>\n                <Route path='/Blogs' component={Blogs} />\n                <Route path='/Projects' component={Projects} />\n                <Route path='/About me' component={AboutMe} />\n                <Route path='/Edit' component={Edit} />\n              </Switch>\n            </Panel>\n          </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default Tabs;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled, { keyframes } from 'styled-components';\nimport Tabs from './Tabs'\n\nlet tabConfigs = [\n  \"Blogs\",\n  \"Projects\",\n  \"About me\"\n];\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst AnimeWrapper = styled.div`\n  animation: 1s ${fadeIn} ease-out;\n  animation-fill-mode: forwards;\n  background: none;\n`;\n\nconst Home = ({tabsConfigs, articles}) => {\n  return (\n    <AnimeWrapper>\n      <Tabs tabs={tabConfigs} articles={articles}/>\n    </AnimeWrapper>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Loading from './components/Loading'\nimport Home from './components/Home'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoading: true };\n  }\n\n  componentDidMount() {\n    setTimeout(() => { this.setState({isLoading: false}); }, 1000);\n  }\n\n  render() {\n    return(\n        this.state.isLoading? <Loading/>:<Home/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}